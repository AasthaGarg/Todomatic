{"ast":null,"code":"var _jsxFileName = \"E:\\\\Todomatic\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction usePrevious(value) {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n_c = FILTER_NAMES;\n\nfunction App(props) {\n  _s2();\n\n  const [filter, setFilter] = useState('All');\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this));\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name == filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this));\n\n  function FilterButton(props) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn toggle-btn\",\n      \"aria-pressed\": props.isPressed,\n      onClick: () => props.setFilter(props.name),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \"Show \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \" tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      tabIndex: \"-1\",\n      ref: listHeadingRef,\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"0Av6MbkjslVCzyty6SXOjAlpU2A=\", false, function () {\n  return [usePrevious];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FILTER_NAMES\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["E:/Todomatic/src/App.js"],"names":["React","useState","useRef","useEffect","Form","FilterButton","Todo","nanoid","usePrevious","value","ref","current","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","App","props","filter","setFilter","tasks","setTasks","toggleTaskCompleted","id","updatedTasks","map","deleteTask","remainingTasks","editTask","newName","editedTaskList","name","taskList","filterList","isPressed","addTask","newTask","tasksNoun","length","headingText","listHeadingRef","prevTaskLength","focus"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Form from \"./components/Form\";\r\nimport FilterButton from \"./components/FilterButton\";\r\nimport Todo from \"./components/Todo\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: task => !task.completed,\r\n  Completed: task => task.completed\r\n};\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction App(props) {\r\n  const [filter, setFilter] = useState('All');\r\n  const [tasks, setTasks] = useState(props.tasks);\r\n  function toggleTaskCompleted(id) {\r\n    const updatedTasks = tasks.map(task => {\r\n      // if this task has the same ID as the edited task\r\n      if (id === task.id) {\r\n        // use object spread to make a new object\r\n        // whose `completed` prop has been inverted\r\n        return {...task, completed: !task.completed}\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(updatedTasks);\r\n  }\r\n  function deleteTask(id) {\r\n    const remainingTasks = tasks.filter(task => id !== task.id);\r\n    setTasks(remainingTasks);\r\n  }\r\n  function editTask(id, newName) {\r\n    const editedTaskList = tasks.map(task => {\r\n    // if this task has the same ID as the edited task\r\n      if (id === task.id) {\r\n        //\r\n        return {...task, name: newName}\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(editedTaskList);\r\n  }\r\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => (\r\n    <Todo\r\n        id={task.id}\r\n        name={task.name}\r\n        completed={task.completed}\r\n        key={task.id}\r\n        toggleTaskCompleted={toggleTaskCompleted}\r\n        deleteTask={deleteTask}\r\n        editTask={editTask}\r\n      />\r\n    )\r\n  );\r\n  const filterList = FILTER_NAMES.map(name => (\r\n    <FilterButton key={name} name={name} isPressed={name==filter} setFilter={setFilter} />\r\n  ));\r\n  function FilterButton(props) {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn toggle-btn\"\r\n        aria-pressed={props.isPressed}\r\n        onClick={() => props.setFilter(props.name)}\r\n      >\r\n        <span className=\"visually-hidden\">Show </span>\r\n        <span>{props.name}</span>\r\n        <span className=\"visually-hidden\"> tasks</span>\r\n      </button>\r\n    );\r\n  }\r\n  function addTask(name) {\r\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\r\n    setTasks([...tasks, newTask]);\r\n  }\r\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\r\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\r\n  const listHeadingRef = useRef(null);\r\n  const prevTaskLength = usePrevious(tasks.length);\r\n  useEffect(() => {\r\n    if (tasks.length - prevTaskLength === -1) {\r\n      listHeadingRef.current.focus();\r\n    }\r\n  }, [tasks.length, prevTaskLength]);\r\n  return (\r\n    <div className=\"todoapp stack-large\">\r\n      <h1>TodoMatic</h1>\r\n      <Form addTask={addTask} />\r\n      <div className=\"filters btn-group stack-exception\">\r\n        {filterList}\r\n      </div>\r\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef} >{headingText}</h2>\r\n      <ul\r\n        role=\"list\"\r\n        className=\"todo-list stack-large stack-exception\"\r\n        aria-labelledby=\"list-heading\"\r\n      >\r\n        {taskList}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}